'use strict';

const fs = require('fs')
    , util = require('util')
    , exec = require('child_process').exec
    , Client = require('../src/Client')
    , markers = require('../src/markers')
    , testfile = 'tmp-' + process.pid
    , chai = require('chai')
    , chaiAsPromised = require('chai-as-promised')
    , expect = chai.expect

chai.use(chaiAsPromised)
chai.should()

function MockSocket() {}
MockSocket.prototype.send = function(data, options, callback) {
  const self = this

  function getOptions() {
    if (self.cwd) {
      return {cwd: self.cwd}
    }
    return undefined
  }

  setTimeout(function() {
    callback && callback()

    function answer(data) { self.emit('message', markers.DATA + data.toString('urf8')) }
    function error(data)  { self.emit('message', markers.ERROR + data.toString('utf8')) }

    data = data && data.trim()

    if (!data || data.length == 0) {
      return error('no command received')
    }

    if (data.indexOf('cd') == 0) {
      self.cwd = data.substring(2).trim()
      answer(markers.END)
    } else {
      const command = exec(data, getOptions())
      command.stdout.on('data', answer)
      command.stderr.on('data', error)
      command.on('error', error)
      command.on('close', code => {
        if (code == 0) {
          answer(markers.END)
        } else {
          error(markers.CODE + code)
        }
      })
    }
  }, 20)
}
util.inherits(MockSocket, require('events').EventEmitter)

function mockSocketFactory(server) {
  const socket = new MockSocket()
  setTimeout(socket.emit.bind(socket, 'open'), 10)
  return socket;
}

function mockClient() {
  return new Client('mock server', mockSocketFactory)
}

describe('gitlab-runner-client', function() {
  before(function() {
    fs.writeFileSync(testfile, 'echo "start testfile"\necho "end testfile"')
  })

  after(function() {
    fs.unlinkSync(testfile)
  })

  describe('#constructor', function() {
    it('should receive a server address and an optional socket factory', function() {
      expect(() => new Client()).to.throw(TypeError)
      expect(() => new Client(null)).to.throw(TypeError)
      expect(() => new Client(123)).to.throw(TypeError)
      expect(() => new Client('server', null)).to.throw(TypeError)
      expect(() => new Client('server', 123)).to.throw(TypeError)
      expect(() => new Client('server')).to.not.throw(TypeError)
    })

    it('should support a custom socket factory', function() {
      expect(() => new Client('mock server', mockSocketFactory)).to.not.throw(Error)
    })
  })

  describe('#runFile', function() {
    it('should throw on invalid file', function() {
      return Promise.resolve()
        .then(() => mockClient().runFile().should.be.rejected)
        .then(() => mockClient().runFile('/invalid').should.be.rejected)
    })

    it('should work with a regular file', function() {
      return Promise.resolve()
        .then(() => mockClient().runFile(testfile).should.be.fulfilled)
    })
  })

  describe('#runCommand', function() {
    it('should throw on invalid command', function() {
      return Promise.resolve()
        .then(() => mockClient().runCommand().should.be.rejected)
        .then(() => mockClient().runCommand('invalid').should.be.rejected)
    })

    it('should work with a regular command', function() {
      return Promise.resolve()
        .then(() => mockClient().runCommand('pwd').should.be.fulfilled)
        .then(() => mockClient().runCommand('ls').should.be.fulfilled)
    })

    it('should work with a regular command on a specific folder', function() {
      return Promise.resolve()
        .then(() => mockClient().runCommand('pwd', '/var').should.be.fulfilled)
        .then(() => mockClient().runCommand('ls', '/var').should.be.fulfilled)
    })
  })
})
