#!/usr/bin/env node

'use strict'

const yargs = require('yargs')
  .usage('Usage: $0 -s <server> [-d <directory>] [-f <file> | <command>]')
  .alias('v', 'verbose')
    .boolean('v')
    .describe('v', 'Show more output')
  .alias('d', 'directory')
    .nargs('d', 1)
    .describe('d', 'Directory where the commands will be executed')
  .alias('f', 'file')
    .nargs('f', 1)
    .describe('f', 'File to execute')
  .alias('s', 'server')
    .nargs('s', 1)
    .describe('s', 'Server address')
  .help('h').alias('h', 'help')
  .demand('server')

const argv = yargs.argv
    , hasFile = !!(argv.file && argv.file.length > 0)
    , hasCommand = !!(argv._ && argv._.length > 0)

if (hasFile == hasCommand) {  // XOR
  yargs.showHelp()
  console.error('Invalid arguments, must provide a file or a command, but not neither or both')
  process.exit(1)
}

const Client = require('../src/Client')
    , client = new Client(argv.server)

function onError(e) {
  console.log('ERROR:', e)
  process.exit(1)
}

function onClose(e) {
  console.log('CLOSE:', e)
  process.exit(1)
}

client.verbose(argv.v)

client.on('error', onError)
client.on('close', onClose)

let promise = null
if (hasFile) {
  promise = client.runFile(argv.file, argv.directory, console.log)
} else if (hasCommand) {
  promise = client.runCommand(argv._.join(' '), argv.directory, console.log)
}

function finalize(e) {
  client.removeListener('error', onError)
  client.removeListener('close', onClose)
  if (e) {
    console.log('ERROR:', e)
    process.exit(1)
  } else {
    process.exit(0)
  }
}

promise
  .then(finalize)
  .catch(finalize)
