'use strict';

const WebSocketServer = require('ws').Server
    , exec = require('child_process').exec
    , markers = require('./markers')
    , options = {}

function Server(port) {
  const self = this
  port = port || 8080

  self.start = function () {
    const wss = new WebSocketServer({port: port})

    wss.on('listening', () => {
      console.log(`[SERVER] listening at ${port}`)
    })

    wss.on('connection', function(socket) {
      let cwd = null
        , commandTimeout = null

      socket.on('error', e => {
        error(e)
      })

      socket.on('message', message => {
        console.log('message:', message)
        message = message.trim()

        if (!message || message.length == 0) {
          return error('no command received')
        }

        if (message.indexOf('cd') == 0 && message.length > 2) {
          cwd = message.substring(2).trim()
          return answer(markers.END)
        }

        const command = exec(message, getExecOptions())
        startTimer(message, command)

        command.stdout.on('data', data => {
          answer(toString(data).replace(/\n$/, ''))
          resetTimer(message, command)
        })

        command.stderr.on('data', data => {
          answer(toString(data).replace(/\n$/, ''))
          resetTimer(message, command)
        })

        command.on('error', e => {
          error(e)
          clearTimer()
        })

        command.on('close', code => {
          clearTimer()
          if (code == 0) {
            answer(markers.END)
          } else {
            error(markers.CODE + code)
          }
        })
      })

      function startTimer(message, command) {
        commandTimeout = setTimeout(function() {
          error('timeout: ' + message)
          command.kill('SIGKILL')
        }, 60000) // 60 seconds
      }

      function clearTimer() {
        clearTimeout(commandTimeout)
      }

      function resetTimer(message, command) {
        clearTimer()
        startTimer(message, command)
      }

      function getExecOptions() {
        if (cwd && cwd.length > 0) {
          return {cwd: cwd}
        }

        return undefined
      }

      function answer(data) {
        if (socket.readyState == socket.OPEN) {
          socket.send(markers.DATA + data)
        }
      }

      function error(data) {
        console.log('error: ' + data)
        if (socket.readyState == socket.OPEN) {
          socket.send(markers.ERROR + data)
        }
      }

      function toString(data) {
        if (typeof data == 'string') {
          return data
        }
        return data && data.toString('utf8') || ''
      }
    })
  }
}

module.exports = Server
